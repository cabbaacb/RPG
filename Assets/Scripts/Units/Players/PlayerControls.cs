//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Units/Players/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RPG.Units.Player
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""e91e3c41-35c8-47c6-81d6-7fa63e818559"",
            ""actions"": [
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Button"",
                    ""id"": ""e5e863fd-d9ab-489f-af35-8087426311d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""d51b0bde-7983-4592-a11c-7ad306cff597"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwordAttack"",
                    ""type"": ""Button"",
                    ""id"": ""713f429d-9401-4cab-9120-6566b4787265"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShieldAttack"",
                    ""type"": ""Button"",
                    ""id"": ""2f4ebf1d-1b06-43af-9fa9-e9d7b8cab813"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""5b5c1e0f-f90a-46b4-b97c-4cb1fe955b72"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7d4f4d49-48f1-430d-90fe-3f77589d8115"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6366599b-327b-4db3-9d1b-41f21e510904"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""763d7497-d6ae-4f79-b989-5b248662ee67"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4f85a897-52ca-4243-8445-4b059de264d8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""35122ecc-6d1c-46d8-bcac-65db9cb5de1c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""302c8ea0-606c-44a3-80a7-a3e5f47223b6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwordAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8446ee3f-9a67-46ba-a76b-c68434440762"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShieldAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""61e0951e-9d8d-4221-8fb9-7b15bd1de911"",
            ""actions"": [
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""9a24412b-0d61-4c6e-9633-2af997c7be7e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1e1a09e-4d27-487b-85e6-54e6f9f789e3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Unit
            m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
            m_Unit_Vertical = m_Unit.FindAction("Vertical", throwIfNotFound: true);
            m_Unit_Horizontal = m_Unit.FindAction("Horizontal", throwIfNotFound: true);
            m_Unit_SwordAttack = m_Unit.FindAction("SwordAttack", throwIfNotFound: true);
            m_Unit_ShieldAttack = m_Unit.FindAction("ShieldAttack", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Delta = m_Camera.FindAction("Delta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Unit
        private readonly InputActionMap m_Unit;
        private IUnitActions m_UnitActionsCallbackInterface;
        private readonly InputAction m_Unit_Vertical;
        private readonly InputAction m_Unit_Horizontal;
        private readonly InputAction m_Unit_SwordAttack;
        private readonly InputAction m_Unit_ShieldAttack;
        public struct UnitActions
        {
            private @PlayerControls m_Wrapper;
            public UnitActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Vertical => m_Wrapper.m_Unit_Vertical;
            public InputAction @Horizontal => m_Wrapper.m_Unit_Horizontal;
            public InputAction @SwordAttack => m_Wrapper.m_Unit_SwordAttack;
            public InputAction @ShieldAttack => m_Wrapper.m_Unit_ShieldAttack;
            public InputActionMap Get() { return m_Wrapper.m_Unit; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
            public void SetCallbacks(IUnitActions instance)
            {
                if (m_Wrapper.m_UnitActionsCallbackInterface != null)
                {
                    @Vertical.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnVertical;
                    @Vertical.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnVertical;
                    @Vertical.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnVertical;
                    @Horizontal.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnHorizontal;
                    @SwordAttack.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnSwordAttack;
                    @SwordAttack.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnSwordAttack;
                    @SwordAttack.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnSwordAttack;
                    @ShieldAttack.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnShieldAttack;
                    @ShieldAttack.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnShieldAttack;
                    @ShieldAttack.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnShieldAttack;
                }
                m_Wrapper.m_UnitActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Vertical.started += instance.OnVertical;
                    @Vertical.performed += instance.OnVertical;
                    @Vertical.canceled += instance.OnVertical;
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @SwordAttack.started += instance.OnSwordAttack;
                    @SwordAttack.performed += instance.OnSwordAttack;
                    @SwordAttack.canceled += instance.OnSwordAttack;
                    @ShieldAttack.started += instance.OnShieldAttack;
                    @ShieldAttack.performed += instance.OnShieldAttack;
                    @ShieldAttack.canceled += instance.OnShieldAttack;
                }
            }
        }
        public UnitActions @Unit => new UnitActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Delta;
        public struct CameraActions
        {
            private @PlayerControls m_Wrapper;
            public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Delta => m_Wrapper.m_Camera_Delta;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Delta.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnDelta;
                    @Delta.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnDelta;
                    @Delta.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnDelta;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Delta.started += instance.OnDelta;
                    @Delta.performed += instance.OnDelta;
                    @Delta.canceled += instance.OnDelta;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface IUnitActions
        {
            void OnVertical(InputAction.CallbackContext context);
            void OnHorizontal(InputAction.CallbackContext context);
            void OnSwordAttack(InputAction.CallbackContext context);
            void OnShieldAttack(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnDelta(InputAction.CallbackContext context);
        }
    }
}
